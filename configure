#!/usr/bin/env python
"""
From <https://github.com/joyent/node/blob/master/configure-gyp>
"""

import optparse
import os
import json
import sys
import glob
import subprocess

root_dir = os.path.dirname(os.path.abspath(__file__))

sys.path.insert(0, os.path.join(root_dir, 'tools', 'gyp', 'pylib'))
import gyp

# parse our options
parser = optparse.OptionParser()

parser.add_option("--debug",
    action="store_true",
    dest="debug",
    help="Build debug build")

parser.add_option("--prefix",
    action="store",
    dest="prefix",
    default="",
    help="Select the install prefix (defaults to "")")

parser.add_option("--arch",
    action="store",
    dest="arch",
    help="Select the default architecture (ia32,x64,arm)")

parser.add_option("--openssl-no-asm",
    action="store_true",
    dest="openssl_no_asm",
    help="Do not build optimized assembly for OpenSSL")
    
parser.add_option('--without-ssl',
    action='store_true',
    dest='without_ssl',
    help='build without SSL')

# deprecated
parser.add_option('--openssl-includes',
    action='store',
    dest='shared_openssl_includes',
    help=optparse.SUPPRESS_HELP)

# deprecated
parser.add_option('--openssl-libpath',
    action='store',
    dest='shared_openssl_libpath',
    help=optparse.SUPPRESS_HELP)

# deprecated
parser.add_option('--openssl-use-sys',
    action='store_true',
    dest='shared_openssl',
    help=optparse.SUPPRESS_HELP)
    
parser.add_option('--ninja',
    action='store_true',
    dest='use_ninja',
    help='generate files for the ninja build system')
    
parser.add_option('--xcode',
    action='store_true',
    dest='use_xcode',
    help='generate build files for use with xcode')

(options, args) = parser.parse_args()


def pkg_config(pkg):
  cmd = os.popen('pkg-config --libs %s' % pkg, 'r')
  libs = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  cmd = os.popen('pkg-config --cflags %s' % pkg, 'r')
  cflags = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  return (libs, cflags)


def uname(switch):
  f = os.popen('uname %s' % switch)
  s = f.read().strip()
  f.close()
  return s

def host_arch_win():
  """Host architecture check using environ vars (better way to do this?)"""

  arch = os.environ.get('PROCESSOR_ARCHITECTURE', 'x86')

  matchup = {
    'AMD64'  : 'x64',
    'x86'    : 'ia32',
    'arm'    : 'arm',
    'mips'   : 'mips',
  }

  return matchup.get(arch, 'ia32')

def host_arch():
  """Host architecture. One of arm, ia32 or x64."""

  if sys.platform == "win32":
      return host_arch_win()

  if sys.platform == "darwin":
      return 'ia32'

  arch = uname('-p')

  if arch == 'unknown':
    arch = uname('-m')

  if arch.startswith('arm'):
      # handle arm, armv3l, armv6l, etc.
      return 'arm'

  return {
    'x86': 'ia32',
    'i386': 'ia32',
    'i486': 'ia32',
    'i586': 'ia32',
    'i686': 'ia32',
    'x86_64': 'x64',
    'amd64': 'x64',
  }.get(arch, arch)


def target_arch():
  # TODO act on options.dest_cpu
  return host_arch()


def configure_links(o):
  # TODO add gdb and dest_cpu
  o['variables']['links_debug'] = 'true' if options.debug else 'false'
  o['variables']['links_prefix'] = options.prefix if options.prefix else ''
  o['variables']['host_arch'] = host_arch()
  o['variables']['target_arch'] = options.arch if options.arch else target_arch()
  
def configure_libuv(o):
  o['variables']['uv_library'] = 'static_library'

#print "configure options:", options

output = {
  'variables': {},
  'include_dirs': [],
  'libraries': [],
  'defines': [],
  'cflags': [],
}

configure_links(output)
configure_libuv(output)

# variables should be a root level element,
# move everything else to target_defaults
variables = output['variables']
del output['variables']
output = {
  'variables': variables,
  'target_defaults': output
}

fn = os.path.join(root_dir, 'options.gypi')
print "creating ", fn

f = open(fn, 'w+')
f.write("# Do not edit. Generated by the configure script.\n")
json.dump(output, f, indent=2, skipkeys=True)
f.write("\n")
f.close()

print "Generating build system with GYP..."

gyp_args = [sys.executable, 'links.py', '--no-parallel']

sys.exit(subprocess.call(gyp_args))
